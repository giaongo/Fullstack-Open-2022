import { createSlice } from "@reduxjs/toolkit"
import anecdoteService from "../services/anecdotes"
// id is auto-generated by json-server
// const getId = () => (100000 * Math.random()).toFixed(0)

/*This function returns an object containing the reducer and the action creators defined by the reducers parameter */
const anecdoteSlice = createSlice({
  name:'anecdote', 
  initialState: [],
  reducers: {
    voteAnecdote(state, action) {
      const changedAnecdote = action.payload
      return state
      .map(anecdote => anecdote.id === changedAnecdote.id ? changedAnecdote : anecdote)
      .sort((anecdote1, anecdote2) => anecdote2.votes - anecdote1.votes)
    },
  
    addNewAnecdote(state, action) {
      console.log("Action ", action);
      console.log(JSON.parse(JSON.stringify(state)));
      return state.concat(action.payload)
    }, 
    
    setAnecdotes(state, action) {
      return action.payload
    }
  }

})


export const {voteAnecdote, addNewAnecdote, setAnecdotes} = anecdoteSlice.actions

//React Thunk pattern receives Redux dispatch and getState methods as parameters.
// fetch all anecdotes from database and set the state
export const initializeAnecdotes = () => {
  return async dispatch => {
    const anecdotes = await anecdoteService.getAll()
    dispatch(setAnecdotes(anecdotes))
  }
}

//React Thunk pattern receives Redux dispatch and getState methods as parameters.
// add the specific anecdotes to database and set the state
export const addAnecdote = (newAnecdote) => {
  return async dispatch => {
    const anecdote = await anecdoteService.addAnecdote(newAnecdote)
    dispatch(addNewAnecdote(anecdote))
  }
}

// React Thunk pattern receives Redux dispatch and getState methods as parameters.
// vote a single note by searching the note from the state -> update the database and update the state
export const voteSingleAnecdote = (id) => {
  return async (dispatch,getState) => {
      const state = getState()
      // find the anecdote by id
       const anecdoteToChange = state.anecdote.find(anecdote => anecdote.id === id)

      // create a new anecdote by incrementing vote number
      const changedAnecdote = {...anecdoteToChange, votes:anecdoteToChange.votes + 1}
      
      const updatedAnecdote = await anecdoteService.increaseVoteAnecdote(changedAnecdote)

      dispatch(voteAnecdote(updatedAnecdote))
  }


} 
export default anecdoteSlice.reducer